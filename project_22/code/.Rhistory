scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B1P1', 'B2P2', 'B3P3', "B2P3", "B3P1", "B3P2"),
values=c('B1P1'="gray17", 'B2P2'='dodgerblue3', 'B3P3'='magenta4',
"B2P3"="olivedrab4", "B3P1"="chocolate", "B3P2"="midnightblue")) +
ggtitle("Fish")
p4 = ggplot(subset(all, Pond=="B2P4")) + theme_light() +
geom_line(aes(y=ODO_mgL, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P0"), aes(y=ODO_mgL, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=ODO_mgL, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL152"), aes(y=ODO_mgL, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=ODO_mgL, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B2P4', 'B3P0', 'ERL122', "ERL152", "ERL85"),
values=c('B2P4'="gray17", 'B3P0'='dodgerblue3', 'ERL122'='magenta4',
"ERL152"="olivedrab4", "ERL85"="chocolate")) +
ggtitle("No Fish")
plot_grid(p3, p4, nrow = 2, rel_heights =  c(0.229,0.2,0.2,0.32))
# BGAPC RFU
p5 = ggplot(subset(all, Pond=="B1P1")) + theme_light() +
geom_line(aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P3"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B1P1', 'B2P2', 'B3P3', "B2P3", "B3P1", "B3P2"),
values=c('B1P1'="gray17", 'B2P2'='dodgerblue3', 'B3P3'='magenta4',
"B2P3"="olivedrab4", "B3P1"="chocolate", "B3P2"="midnightblue")) +
ggtitle("Fish")
p6 = ggplot(subset(all, Pond=="B2P4")) + theme_light() +
geom_line(aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P0"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL152"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=BGAPC_RFU, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B2P4', 'B3P0', 'ERL122', "ERL152", "ERL85"),
values=c('B2P4'="gray17", 'B3P0'='dodgerblue3', 'ERL122'='magenta4',
"ERL152"="olivedrab4", "ERL85"="chocolate")) +
ggtitle("No Fish")
plot_grid(p5, p6, nrow = 2, rel_heights =  c(0.229,0.2,0.2,0.32))
# Cond uS/cm
p7 = ggplot(subset(all, Pond=="B1P1")) + theme_light() +
geom_line(aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P3"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B1P1', 'B2P2', 'B3P3', "B2P3", "B3P1", "B3P2"),
values=c('B1P1'="gray17", 'B2P2'='dodgerblue3', 'B3P3'='magenta4',
"B2P3"="olivedrab4", "B3P1"="chocolate", "B3P2"="midnightblue")) +
ggtitle("Fish")
p8 = ggplot(subset(all, Pond=="B2P4")) + theme_light() +
geom_line(aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P0"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL152"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=Cond_uScm, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B2P4', 'B3P0', 'ERL122', "ERL152", "ERL85"),
values=c('B2P4'="gray17", 'B3P0'='dodgerblue3', 'ERL122'='magenta4',
"ERL152"="olivedrab4", "ERL85"="chocolate")) +
ggtitle("No Fish")
plot_grid(p7, p8, nrow = 2, rel_heights =  c(0.229,0.2,0.2,0.32))
# Speficic Cond uS/cm
p9 = ggplot(subset(all, Pond=="B1P1")) + theme_light() +
geom_line(aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P3"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B1P1', 'B2P2', 'B3P3', "B2P3", "B3P1", "B3P2"),
values=c('B1P1'="gray17", 'B2P2'='dodgerblue3', 'B3P3'='magenta4',
"B2P3"="olivedrab4", "B3P1"="chocolate", "B3P2"="midnightblue")) +
ggtitle("Fish")
p10 = ggplot(subset(all, Pond=="B2P4")) + theme_light() +
geom_line(aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P0"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL152"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=SpCond_uScm, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B2P4', 'B3P0', 'ERL122', "ERL152", "ERL85"),
values=c('B2P4'="gray17", 'B3P0'='dodgerblue3', 'ERL122'='magenta4',
"ERL152"="olivedrab4", "ERL85"="chocolate")) +
ggtitle("No Fish")
plot_grid(p9, p10, nrow = 2, rel_heights =  c(0.229,0.2,0.2,0.32))
# fDOM RFU
p11 = ggplot(subset(all, Pond=="B1P1")) + theme_light() +
geom_line(aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P3"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B1P1', 'B2P2', 'B3P3', "B2P3", "B3P1", "B3P2"),
values=c('B1P1'="gray17", 'B2P2'='dodgerblue3', 'B3P3'='magenta4',
"B2P3"="olivedrab4", "B3P1"="chocolate", "B3P2"="midnightblue")) +
ggtitle("Fish")
p12 = ggplot(subset(all, Pond=="B2P4")) + theme_light() +
geom_line(aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="B3P0"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL152"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=fDOM_RFU, x=Date_time, color = Pond)) +
scale_x_datetime(date_breaks = "1 day", date_labels = "%m-%d") +
scale_color_manual(breaks=c('B2P4', 'B3P0', 'ERL122', "ERL152", "ERL85"),
values=c('B2P4'="gray17", 'B3P0'='dodgerblue3', 'ERL122'='magenta4',
"ERL152"="olivedrab4", "ERL85"="chocolate")) +
ggtitle("No Fish")
plot_grid(p11, p12, nrow = 2, rel_heights =  c(0.229,0.2,0.2,0.32))
################################################################################
# This is a metabolism analysis of pond ERL122
# Treatment ERL122: no Fish
# Observation period used to estimate metabolism:
# 2022-06-23 00:00:00 to 2022-06-29 00:00:00
# Model used: Bayesian
# The pond has been named B3P4 in the raw data.
# ERL122 is the correct name and will be used for subsequent analyses
################################################################################
# Step 0: set up R-script ------------------------------------------------------
rm(list= ls())
# Packages ad functions from Moritz Luehrig's paper
source("../../Literature/Moritz_Luehrig_paper_stuff/methods_packages.R")
# Estimating lake metabolism with free-water oxygen
# See "report_analysis_metabolism_B3P3_2022" for further details
require(LakeMetabolizer)
# For plotting
require(GGally)
# Imputation of NAs for time-series (our NAs are due to outlier processing)
require(imputeTS)
# For Bayesian lake metabolism modeling
require(R2jags) # Also, installing JAGS is necessary under
# http://www.sourceforge.net/projects/mcmc-jags/files
require(ggpubr)
require(grid) # Arranging multiple plots
require(grDevices) # Saving png files
# This is our complete dataset of the sondes measurements 2022
# Measurement Interval: 2 minutes
all <- fread("../data/processed_data_sondes/ponds_sonde_data_all_uncut.txt")
# Importing the metadata
# Wind and irradiation
# Measurement Interval: 1 hour, hourly averages
# Source: QAS_L automated weather station near Narsarsuaq
# https://dataverse.geus.dk/dataset.xhtml?persistentId=doi:10.22008/FK2/IW73UU
# wind sensor height: ca. 2.87m
meta <- fread("../data/metadata_metabolism_analysis/metadata_2022.txt")
# Step 1: data formatting ------------------------------------------------------
# Select columns to keep from our time series
all <- all[, c("Pond", "Date_time", "ODO_mgL", "Temp_C")]
# Select Pond B1P1 (Treatment: Fish)
all <- subset(all, Pond == "ERL122")
# Rename
all <- setnames(all,c("Pond", "datetime", "do.obs", "wtr"))
# Isolate the desired period (described in the introduction)
all <- all[c(344:4664),]
# choose desired period for the metadata
meta <- meta[c(1:145),]
# rename
meta <- setnames(meta,c("datetime", "dsr_cor", "wsp"))
meta <- meta %>%
mutate(datetime = as.POSIXct(format(datetime, format = "%Y-%m-%d %H:00:00", tz = "UTC"), tz = "UTC"))
# Create a new inflated dataset with measurements every 2 minutes
# The hourly mean will be assigned to every observation (2min-interval) within that hour
meta_ext <- meta %>%
complete(datetime = seq(from = min(datetime), to = max(datetime), by = "2 min"))
# Fill the missing wind speed and irradiation values with the corresponding hourly values using 'fill'
meta_ext <- meta_ext %>%
fill(wsp, .direction = "up") %>%
fill(dsr_cor, .direction = "up")
# Shift wind speed and irradiation one row up
meta_ext <- meta_ext %>%
mutate(wsp = lead(wsp, default = last(wsp))) %>%
mutate(dsr_cor = lead(dsr_cor, default = last(dsr_cor)))
# Ommit last row (not included in our timeseries)
#meta_ext <- meta_ext[-nrow(meta_ext), ]
# Reset row names for the final result
rownames(meta_ext) <- NULL
# Step 2: merge the 2 datasets -------------------------------------------------
all <- merge(meta_ext, all, by = "datetime")
# Step 3: Missing data imputation ----------------------------------------------
# We need a complete ODO_mgL timeseries. Therefore we will impute the missing values
# here, with the package "imputeTS", which is specifically designed to impute time-series
# observations.
colSums(is.na(all))
# Make a timeseries object
ts <- ts(all$do.obs, frequency = 720)
# Impute with imputeTS
imp_all <- na_ma(ts) # use this function!
imp_all <- data.table(imp_all)
imp_all$datetime <- all$datetime
# Check for missing values in the imputed dataset
sum(is.na(imp_all)) # No missing values anymore
# Check imputation by plotting the original and the imputed dataset
plot(x = all$datetime, y = all$do.obs, type = "l", col = "blue", lwd = 2)
lines(x = imp_all$datetime, y = imp_all$imp_all, type = "l",
col = rgb(1, 0, 0, alpha = 0.3), lwd = 2)
# The imputation worked very well!
# Replace original column with imputed column
all$do.obs <- imp_all$imp_all
sum(is.na(all))
# Step 4: Model choice ---------------------------------------------------------
# Gas transfer coefficient model: kvachon()
# - needs wind speed, sensor height, and lake area
# Lake metabolism model: metab.bayesian()
# Most flexible model
# Step 5: Calculate k600 -------------------------------------------------------
# This function needs specific column names
all$wnd <- all$wsp
all$wsp <- NULL
# Normalize wind to 10m sensor height
wind.scale <- wind.scale(all, wnd.z = 2.87)
all <- merge(all, wind.scale, by = "datetime")
all$wnd <- all$wnd_10
all$wnd_10 <- NULL
# Also only the 2 columns of interest, otherwise it gets confused
all.600 <- all[,c("datetime","wnd")]
k600.vachon <- k.vachon(all.600, lake.area = 11000)
# Merge
all <- merge(all, k600.vachon, by = "datetime")
# Step 6: Calculate gas-specific k600 ------------------------------------------
kgas <- k600.2.kGAS(all)
# Merge
all <- merge(all, kgas, by = "datetime")
# only keep k.gas
all$k600 <- NULL
# Step 7: Calculate dissolved oxygen saturated (do.sat) ------------------------
# I know that the sonde has do.sat measurements, but I have more faith
# in the authors of this paper to calculate a more accurate do.sat then the
# sonde-intern calculations.
o2.sat <- o2.at.sat(all[,c('datetime','wtr')])
# Merge
all <- merge(all, o2.sat, by = "datetime")
# Step 8: Calculate Actively mixed layer depth (z.mix) -------------------------
################################################################################
# The max depth of pond ERL122 is about 5m.
# According to the profiling plots, ERL122 had an actively mixed layer depth
# about 0.6m on June 21, 2022
# Since mixed layer depth is highly dependent on weather, I'll asssume an
# average mixed layer depth of 2m
################################################################################
# Set Actively mixed layer depth
all$z.mix <- 2
# Step 9: Derive photosynthetically active radiation (par) from shortwave irradiation (sw) ----
# Here, I take the downwelling shortwave irradiation (tilt corrected) from the
# QAS_L automated weather station a couple of kilometers away from Narsarsuaq
# It's the closest weather station measuring this parameter, that I could find.
# Derive par from sw
par <- sw.to.par(all, sw.col = "dsr_cor")
rownames(par) <- NULL
# Merge
all <- merge(all, par[,c("datetime", "par")], by = "datetime")
# Step 10: Fit model -----------------------------------------------------------
# Choose columns to keep
all <- all[,c("datetime", "do.obs", "do.sat", "k.gas", "z.mix", "par", "wtr")]
# Bayesian
bayesian.res <- metab(all, method="bayesian", wtr.name='wtr', do.obs.name='do.obs',
irr.name='par', z.mix = "z.mix", k.gas.name = "k.gas",
do.sat.name = "do.sat")
bayesian.sd <- attr(bayesian.res, "metab.sd")
# Create a date variable
bayesian.res$Date <- as.Date(paste(bayesian.res$year, "-", bayesian.res$doy, sep = ""), format = "%Y-%j")
# Select columns to keep
bayesian.res <- bayesian.res[,c("Date", "GPP", "R", "NEP")]
# Create a date variable
bayesian.sd$Date <- as.Date(paste(bayesian.sd$year, "-", bayesian.sd$doy, sep = ""), format = "%Y-%j")
# Select columns to keep
bayesian.sd <- bayesian.sd[,c("Date", "GPPsd", "Rsd", "NEPsd")]
bayesian.merge <- merge(bayesian.res, bayesian.sd, by = "Date")
fwrite(bayesian.merge, "../results_metabolism/ERL122_bayesian_2022.txt", sep="\t")
# Step 11: Visualize the results -----------------------------------------------
# Plots of ecosystem parameters-------------------------------------------------
p4 = ggplot((all)) + theme_light() +
geom_line(aes(y=do.obs, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("DO (mg L",NULL^-1,")")))
p5 = ggplot((all)) + theme_light() +
geom_line(aes(y=do.sat, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("Equilibrium\nDO concentration (mg L",NULL^-1,")")))
p6 = ggplot((all)) + theme_light() +
geom_line(aes(y=wtr, x=datetime), color = "gray17") +
rremove("xlab") +
ylab("Temperature in °C")
p7 = ggplot((all)) + theme_light() +
geom_line(aes(y=par, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("PAR (",mu,"mol m",NULL^-2," s",NULL^-1,")")))
p8 = ggplot((all)) + theme_light() +
geom_line(aes(y=k.gas, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("Gas and temperature specific\ngas transfer coefficient (m",NULL^-1,")")))
fig2 <- ggarrange(p4, p5, p6, p7, p8,
nrow=5)
fig3 <- annotate_figure(fig2, top = text_grob("Parameters used to estimate metabolism of ERL122 in 2022"))
plot(fig3)
# Save the plot as a .png
png("../results_metabolism/parameters_ERL122_2022.png", width = 1200, height = 900)
print(fig3)
dev.off()
# Plots of metabolism-----------------------------------------------------------
# Plot
# GPP
p1 = ggplot(data = bayesian.res) + theme_light() +
geom_line(aes(y=GPP, x=Date)) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# R
p2 = ggplot(data = bayesian.res) + theme_light() +
geom_line(aes(y=R, x=Date)) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.res) + theme_light() +
geom_line(aes(y=NEP, x=Date)) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
fig1 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
nrow=3)
fig3 <- annotate_figure(fig1, top = text_grob("Estimated metabolism of pond ERL122 in 2022"))
plot(fig3)
# Save the plot as a .png
png("../results_metabolism/metabolism_ERL122_2022.png", width = 1200, height = 900)
print(fig3)
dev.off()
# Step 0: set up R-script ------------------------------------------------------
rm(list= ls())
source("../../Literature/Moritz_Luehrig_paper_stuff/methods_packages.R")
# For plotting
require(GGally)
require(ggpubr)
require(grid)
# For images
require(grDevices)
# Import the metabolism result datasets
# Treatment: Fish
B3P3 <- fread("../results_metabolism/B3P3_bayesian_2022.txt")
B1P1 <- fread("../results_metabolism/B1P1_bayesian_2022.txt")
B2P2 <- fread("../results_metabolism/B2P2_bayesian_2022.txt")
B2P3 <- fread("../results_metabolism/B2P3_bayesian_2022.txt")
B3P1 <- fread("../results_metabolism/B3P1_bayesian_2022.txt")
B3P2 <- fread("../results_metabolism/B3P2_bayesian_2022.txt")
# Treatment: no Fish
B2P4 <- fread("../results_metabolism/B2P4_bayesian_2022.txt")
ERL122 <- fread("../results_metabolism/ERL122_bayesian_2022.txt")
ERL85 <- fread("../results_metabolism/ERL85_bayesian_2022.txt")
# Create a merged results dataset
# Fish
B3P3$Treatment <- "Fish"
B3P3$Pond <- "B3P3"
B1P1$Treatment <- "Fish"
B1P1$Pond <- "B1P1"
B2P2$Treatment <- "Fish"
B2P2$Pond <- "B2P2"
B2P3$Treatment <- "Fish"
B2P3$Pond <- "B2P3"
B3P1$Treatment <- "Fish"
B3P1$Pond <- "B3P1"
B3P2$Treatment <- "Fish"
B3P2$Pond <- "B3P2"
# No Fish
B2P4$Treatment <- "no Fish"
B2P4$Pond <- "B2P4"
ERL122$Treatment <- "no Fish"
ERL122$Pond <- "ERL122"
ERL85$Treatment <- "no Fish"
ERL85$Pond <- "ERL85"
# Merge
all <- rbind(B1P1, B2P2, B3P3, B2P3, B3P1, B3P2, B2P4, ERL122, ERL85)
# Save
fwrite(all, "../results_metabolism/merged_results_complete_2022.txt", sep = "\t")
# Plot: GPP
# Fish
p1 = ggplot(subset(all, Pond=="B1P1"), aes(y=GPP, x=Date, color = Treatment)) + theme_light() +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_errorbar(aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P2"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15)+
geom_line(data = subset(all, Pond=="B3P3"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P3"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P3"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P1"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P2"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
# No Fish
geom_line(data = subset(all, Pond=="B2P4"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P4"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="ERL122"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=GPP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="ERL85"), aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.15) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")"))) +
ggtitle("Modeled GPP of all Ponds in 2022")
plot(p1)
# Save the plot as a .png
png("../results_metabolism/GPP_complete_2022.png", width = 1600, height = 1000)
print(p1)
dev.off()
# R
# Fish
p2 = ggplot(subset(all, Pond=="B1P1"), aes(y=R, x=Date, color = Treatment)) + theme_light() +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_errorbar(aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P2"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15)+
geom_line(data = subset(all, Pond=="B3P3"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P3"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P3"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P1"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P2"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
# No Fish
geom_line(data = subset(all, Pond=="B2P4"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P4"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="ERL122"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=R, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="ERL85"), aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.15) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")"))) +
ggtitle("Modeled R of all Ponds in 2022")
plot(p2)
# Save the plot as a .png
png("../results_metabolism/R_complete_2022.png", width = 1600, height = 1000)
print(p2)
dev.off()
# NEP
# Fish
p3 = ggplot(subset(all, Pond=="B1P1"), aes(y=NEP, x=Date, color = Treatment)) + theme_light() +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B2P2"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P2"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15)+
geom_line(data = subset(all, Pond=="B3P3"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P3"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B2P3"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P3"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B3P1"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P1"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="B3P2"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B3P2"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
# No Fish
geom_line(data = subset(all, Pond=="B2P4"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="B2P4"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="ERL122"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="ERL122"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
geom_line(data = subset(all, Pond=="ERL85"), aes(y=NEP, x=Date, color = Treatment),lwd = 1.1, alpha = 0.5) +
geom_errorbar(data = subset(all, Pond=="ERL85"), aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.15) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")"))) +
ggtitle("Modeled NEP of all Ponds in 2022")
plot(p3)
# Save the plot as a .png
png("../results_metabolism/NEP_complete_2022.png", width = 1600, height = 1000)
print(p3)
dev.off()
# Plot daily average of the 3 metabolism measures for Fish vs. no Fish ---------
# Import the results dataset
all<- fread("../results_metabolism/merged_results_complete_2022.txt", sep = "\t")
# Calculate average GPP per day and treatment
mean_gpp <- all[, .(mean_GPP = mean(GPP)), by = .(Date, Treatment)]
# Calculate average R per day and treatment
mean_r <- all[, .(mean_R = mean(R)), by = .(Date, Treatment)]
# Calculate average NEP per day and treatment
mean_nep <- all[, .(mean_NEP = mean(NEP)), by = .(Date, Treatment)]
# merge
daily_means <- merge(mean_gpp, mean_nep, by = c("Date", "Treatment"))
daily_means <- merge(daily_means, mean_r, by = c("Date", "Treatment"))
# save
fwrite(daily_means, "../results_metabolism/merged_results_daily_mean_complete_2022.txt", sep = "\t")
# Plot -------------------------------------------------------------------------
# Plot mean daily GPP Fish vs. no Fish
p4 = ggplot(data = daily_means, aes(x = Date, y = mean_GPP, color = Treatment)) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point(alpha = 0.5, size = 3) +
theme_light() +
ylab(expression(paste("mean GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")"))) +
ggtitle("Mean GPP across all ponds and treatments in 2022")
plot(p4)
# Save the plot as a .png
png("../results_metabolism/GPP_daily_means_complete_2022.png", width = 1600, height = 1000)
print(p4)
dev.off()
# Plot mean daily R Fish vs. no Fish
p5 = ggplot(data = daily_means, aes(x = Date, y = mean_R, color = Treatment)) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point(alpha = 0.5, size = 3) +
theme_light() +
ylab(expression(paste("mean R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")"))) +
ggtitle("Mean R across all ponds and treatments in 2022")
plot(p5)
# Save the plot as a .png
png("../results_metabolism/R_daily_means_complete_2022.png", width = 1600, height = 1000)
print(p5)
dev.off()
# Plot mean daily NEP Fish vs. no Fish
p6 = ggplot(data = daily_means, aes(x = Date, y = mean_NEP, color = Treatment)) +
geom_line(lwd = 1.1, alpha = 0.5) +
geom_point(alpha = 0.5, size = 3) +
theme_light() +
ylab(expression(paste("mean NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")"))) +
ggtitle("Mean NEP across all ponds and treatments in 2022")
plot(p6)
# Save the plot as a .png
png("../results_metabolism/NEP_daily_means_complete_2022.png", width = 1600, height = 1000)
print(p6)
dev.off()
