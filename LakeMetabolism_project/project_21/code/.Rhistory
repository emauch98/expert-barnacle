geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.merge.all, aes(x=Date, y=NEP, color=z.mix)) + theme_minimal() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
fig1 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
nrow=3, common.legend = TRUE, legend="right")
annotate_figure(fig1, top = text_grob("Sensitivity analysis for z.mix in pond B1P1, 2021"))
plot(fig1)
p1 = ggplot(data = bayesian.merge.all, aes(x=Date, y=GPP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# R
p2 = ggplot(data = bayesian.merge.all, aes(x=Date, y=R, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.merge.all, aes(x=Date, y=NEP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
fig1 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
nrow=3, common.legend = TRUE, legend="right")
annotate_figure(fig1, top = text_grob("Sensitivity analysis for z.mix in pond B1P1, 2021"))
plot(fig1)
?annotate_figure()
p1 = ggplot(data = bayesian.merge.all, aes(x=Date, y=GPP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# R
p2 = ggplot(data = bayesian.merge.all, aes(x=Date, y=R, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.merge.all, aes(x=Date, y=NEP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
fig1 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
nrow=3, common.legend = TRUE, legend="right")
annotate_figure(fig1, top = text_grob("Sensitivity analysis for z.mix in pond B1P1, 2021"))
# create Z.mix variable identifier
bayesian.merge_0.5$z.mix <- "0.5m"
bayesian.merge_1$z.mix <- "1m"
bayesian.merge_2$z.mix <- "2m"
bayesian.merge_3$z.mix <- "3m"
# Merge
bayesian.merge.all <- rbind(bayesian.merge_0.5, bayesian.merge_1,
bayesian.merge_2, bayesian.merge_3)
# Step 11: Visualize the results -----------------------------------------------
# GPP
p1 = ggplot(data = bayesian.merge.all, aes(x=Date, y=GPP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# R
p2 = ggplot(data = bayesian.merge.all, aes(x=Date, y=R, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.merge.all, aes(x=Date, y=NEP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5")) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3")) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
fig1 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
nrow=3, common.legend = TRUE, legend="right")
annotate_figure(fig1, top = text_grob("Sensitivity analysis for z.mix in pond B1P1, 2021"))
p1 = ggplot(data = bayesian.merge.all, aes(x=Date, y=GPP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5m")) +
geom_errorbar(aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3m")) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# R
p2 = ggplot(data = bayesian.merge.all, aes(x=Date, y=R, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5m")) +
geom_errorbar(aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3m")) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.merge.all, aes(x=Date, y=NEP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5m")) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3m")) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
fig1 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
nrow=3, common.legend = TRUE, legend="right")
annotate_figure(fig1, top = text_grob("Sensitivity analysis for z.mix in pond B1P1, 2021"))
p1 = ggplot(data = bayesian.merge.all, aes(x=Date, y=GPP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5m")) +
geom_errorbar(aes(ymin = GPP-GPPsd, ymax = GPP+GPPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3m")) +
ylab(expression(paste("GPP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# R
p2 = ggplot(data = bayesian.merge.all, aes(x=Date, y=R, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5m")) +
geom_errorbar(aes(ymin = R-Rsd, ymax = R+Rsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3m")) +
ylab(expression(paste("R (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# NEP
p3 = ggplot(data = bayesian.merge.all, aes(x=Date, y=NEP, color=z.mix)) + theme_light() +
geom_line(data = subset(bayesian.merge.all, z.mix == "0.5m")) +
geom_errorbar(aes(ymin = NEP-NEPsd, ymax = NEP+NEPsd), width = 0.12) +
geom_line(data = subset(bayesian.merge.all, z.mix == "1m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "2m")) +
geom_line(data = subset(bayesian.merge.all, z.mix == "3m")) +
ylab(expression(paste("NEP (", O[2], " in mg L", NULL^-1, " day", NULL^-1, ")")))
# Plots of ecosystem parameters
p4 = ggplot((all)) + theme_light() +
geom_line(aes(y=do.obs, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("DO (mg L",NULL^-1,")")))
p5 = ggplot((all)) + theme_light() +
geom_line(aes(y=do.sat, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("Equilibrium\nDO concentration (mg L",NULL^-1,")")))
p6 = ggplot((all)) + theme_light() +
geom_line(aes(y=wtr, x=datetime), color = "gray17") +
rremove("xlab") +
ylab("Temperature in °C")
p7 = ggplot((all)) + theme_light() +
geom_line(aes(y=par, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("PAR (",mu,"mol m",NULL^-2," s",NULL^-1,")")))
p8 = ggplot((all)) + theme_light() +
geom_line(aes(y=k.gas, x=datetime), color = "gray17") +
rremove("xlab") +
ylab(expression(paste("Gas and temperature specific\ngas transfer coefficient (m",NULL^-1,")")))
fig2 <- ggarrange(p1 + rremove("xlab"), p2 + rremove("xlab"), p3 + rremove("xlab"),
p4 + rremove("xlab"), p5 + rremove("xlab"), p6 + rremove("xlab"),
p7 + rremove("xlab"), p8 + rremove("xlab"), nrow=8,
common.legend = TRUE, legend = "right")
annotate_figure(fig2, top = text_grob("Sensitivity analysis for z.mix in pond B1P1, 2021"))
# GPP
################################################################################
# This is a metabolism analysis of Pond B1P1 in 2021
# Treatment B1P1: Fish (Sticklebacks)
#
# This analysis is made in the context of the Stickleback-experiments by Blake's
# group in Greenland 2021.
#
# Aim of this sript: model ecosystem metabolism of B1P1. The whole workflow is
# described in the report "report_analysis_metabolism_B3P3_2022",
# which serves as a blueprint for this analysis.
#
# Observation period used to estimate metabolism of B1P1:
# 2021-09-17 00:00:00 to 2021-09-21 00:00:00
# There is a huge data-gap after 2021-09-21 (more than a day) and we therefore
# only estimate the metabolism of 4 complete days
#
# Model used: Bayesian (see report "report_analysis_metabolism_B3P3_2022"),
# which serves as a blueprint for this analysis.
################################################################################
# Step 0: set up R-script ------------------------------------------------------
rm(list= ls())
# Packages ad functions from Moritz Luehrig's paper
source("../../Literature/Moritz_Luehrig_paper_stuff/methods_packages.R")
# Estimating lake metabolism with free-water oxygen
# See "report_analysis_metabolism_B3P3_2022" for further details
require(LakeMetabolizer)
################################################################################
# This script is meant to import, cut, store, and plot all sonde profiles
# from 2021 in Greenland.
# Please note, that it is important that the .csv files are encoded
# as UTF-8, otherwise the code will not work.
# In excel, one can save a file as UTF-8 .csv.
# I converted some of the files imported to UTF-8 beforehand.
################################################################################
# Step 0: set up R-script ------------------------------------------------------
rm(list= ls())
# Packages ad functions from Moritz Luehrig's paper
source("../../Literature/Moritz_Luehrig_paper_stuff/methods_packages.R")
require(GGally)
require(gridExtra)
# For images
require(grDevices)
# Step 1: merge all raw data files into a single big one -----------------------
# Please ensure that all files are UTF-8 encoded (you'll get an error message
# that hints to that problem if you try run the following script)
path = "../data/sondes_profiling_raw"
filenames <- list.files(path=path, pattern=".csv")
files<-data.table(NULL)
system.time(for(i in filenames){
filepath <- file.path(path,paste(i,sep=""))
dummy1<-fread(filepath,
colClasses = "character" ,
sep = ";",
header = FALSE,
fill=TRUE,
encoding ="UTF-8",
quote = FALSE)
rownumb<-dummy1[V1 %like% "(MM/DD/YYYY)", which=TRUE]+1
colname<-dummy1[V1 %like% "(MM/DD/YYYY)"]
colname <- iconv(as.character(colname), from = "UTF-8", to = "UTF-8//IGNORE")
colname <- gsub("µ", "", colname)  # Remove mu character
colname <- gsub("°", "", colname)  # Remove degree symbol
colname<-gsub(" ", "",(gsub("[[:punct:]]", "",c(lapply(colname,as.character)))))
colname <- make.unique(colname)  # Ensure unique column names
colname<-unlist(strsplit(colname,"\t"))
dummy2<-dummy1[rownumb:.N]
setnames(dummy2,colname)
dummy2[,(colname[c(3,5:length(dummy2))]):=lapply(.SD, as.numeric),.SDcols=colname[c(3,5:length(dummy2))]]
dummy2$Pond<-sub("_Sept.*", "", i) # Extract pond
dummy2$Source_file<-i # Extract source file
dummy2$Day <- str_extract(i, "(Sept\\d{1,2})") # Extract day
files<-rbindlist(list(files, dummy2), fill=TRUE)
})
all <- files
# select columns to keep
# Here, I had 2 columns for both Chlorophyll RFU and Chlorophyll mg/L
# I took the column of Chlorophyll RFU that had the plausible values
# I won't include Chlorophyll mg/L
all <- all[,c("DateMMDDYYYY", "TimeHHMMSS", "Pond", "Day", "Depthm", "ChlorophyllRFU.1", "CondScm", "SpCondScm",
"fDOMRFU", "ODOmgL", "ODOsat", "BGAPCRFU", "pH", "TempC")]
# Step 2: format time, rename columns ------------------------------------------
# format date & time
all$DateMMDDYYYY<-mdy(all$DateMMDDYYYY)
all$Date_time<-ymd_hms(paste(all$DateMMDDYYYY, all$TimeHHMMSS))
setnames(all,1:2,c("Date","Time"))
# exclude "Date" and "Time"
all <- all[,!c("Date", "Time")]
# reorder
all <- all[,c("Date_time", "Pond", "Day", "Depthm", "ChlorophyllRFU.1", "CondScm", "SpCondScm",
"fDOMRFU", "ODOmgL", "ODOsat", "BGAPCRFU", "pH", "TempC")]
# rename
setnames(all, c("Date_time", "Pond", "Day", "Depth_m", "Chlorophyll_RFU", "Cond_uScm", "SpCond_uScm",
"fDOM_RFU", "ODO_mgL", "ODO_sat", "BGAPC_RFU", "pH", "Temp_C"))
# debug: remove duplicate values
all <- unique(all, by=c("Pond", "Date_time"))
# check the variable types
str(all)
# Step 3: cut the profiles -----------------------------------------------------
# Here, I will cut the profile subsets of the individual ponds to the relevant
# range
# Check whether the profiling was done correctly in all ponds
# Check if all Ponds have at least 1 measurement of Depth greater or equal
# to 1m
sapply(unique(all$Pond), function(pond) {
any(all$Depth_m[all$Pond == pond] >= 1)
}) # Since some ponds are very shallow, I'll still include all the ponds for
# the profile cutting
# The current cutting is as follows:
# First, I individually selected a starting level where I cut, depending
# on the pond. Sometimes, the sondes were initially held at a deeper point
# before starting profiling.
# After cutting away everything below the threshold, I search the maximum depth
# and keep only the sequence starting from the threshold up to the maximum depth
# Then, I order the values by increasing depth, not time (sometimes, the sampling person
# might lift the sonde up a bit by accident).
# Initialize an empty list to store results for each pond
result_list <- list()
# Pick individual thresholds
thresholds <- c("B1P1"=0.9, "B1P2"=0.325, "B1P3"=0.75,  "B1P4" = 0.6, "B2P2"=1,
"B2P3"=1, "B2P4"=0.5, "B3P0"=0.6, "B3P1"=0.6, "B3P2"=0.5, "B3P3"=1,
"B3P4"=0.6, "EFL2"=1, "ERL122"=1, "ERL152"=1, "ERL186"=0.52, "ERL32"=1.25,
"ERL33"=1, "ERL5"=1, "ERL85"=1, "ERL87"=0.55, "ERL88"=0.325 , "L26"=1.25)
all2 <- subset(all, Pond == "B1P1")
all2
View(all2)
all2 <- all2[Depth_m >= 0.9,]
seq_len(which.max(all2$Depth_m))
all2 <- all2[seq_len(which.max(all2$Depth_m))]
all2 <- all2 %>%
arrange(Pond, Depth_m)
################################################################################
# This script is meant to import, cut, store, and plot all sonde profiles
# from 2021 in Greenland.
# Please note, that it is important that the .csv files are encoded
# as UTF-8, otherwise the code will not work.
# In excel, one can save a file as UTF-8 .csv.
# I converted some of the files imported to UTF-8 beforehand.
################################################################################
# Step 0: set up R-script ------------------------------------------------------
rm(list= ls())
# Packages ad functions from Moritz Luehrig's paper
source("../../Literature/Moritz_Luehrig_paper_stuff/methods_packages.R")
require(GGally)
require(gridExtra)
# For images
require(grDevices)
# Step 1: merge all raw data files into a single big one -----------------------
# Please ensure that all files are UTF-8 encoded (you'll get an error message
# that hints to that problem if you try run the following script)
path = "../data/sondes_profiling_raw"
filenames <- list.files(path=path, pattern=".csv")
files<-data.table(NULL)
system.time(for(i in filenames){
filepath <- file.path(path,paste(i,sep=""))
dummy1<-fread(filepath,
colClasses = "character" ,
sep = ";",
header = FALSE,
fill=TRUE,
encoding ="UTF-8",
quote = FALSE)
rownumb<-dummy1[V1 %like% "(MM/DD/YYYY)", which=TRUE]+1
colname<-dummy1[V1 %like% "(MM/DD/YYYY)"]
colname <- iconv(as.character(colname), from = "UTF-8", to = "UTF-8//IGNORE")
colname <- gsub("µ", "", colname)  # Remove mu character
colname <- gsub("°", "", colname)  # Remove degree symbol
colname<-gsub(" ", "",(gsub("[[:punct:]]", "",c(lapply(colname,as.character)))))
colname <- make.unique(colname)  # Ensure unique column names
colname<-unlist(strsplit(colname,"\t"))
dummy2<-dummy1[rownumb:.N]
setnames(dummy2,colname)
dummy2[,(colname[c(3,5:length(dummy2))]):=lapply(.SD, as.numeric),.SDcols=colname[c(3,5:length(dummy2))]]
dummy2$Pond<-sub("_Sept.*", "", i) # Extract pond
dummy2$Source_file<-i # Extract source file
dummy2$Day <- str_extract(i, "(Sept\\d{1,2})") # Extract day
files<-rbindlist(list(files, dummy2), fill=TRUE)
})
all <- files
# select columns to keep
# Here, I had 2 columns for both Chlorophyll RFU and Chlorophyll mg/L
# I took the column of Chlorophyll RFU that had the plausible values
# I won't include Chlorophyll mg/L
all <- all[,c("DateMMDDYYYY", "TimeHHMMSS", "Pond", "Day", "Depthm", "ChlorophyllRFU.1", "CondScm", "SpCondScm",
"fDOMRFU", "ODOmgL", "ODOsat", "BGAPCRFU", "pH", "TempC")]
# Step 2: format time, rename columns ------------------------------------------
# format date & time
all$DateMMDDYYYY<-mdy(all$DateMMDDYYYY)
all$Date_time<-ymd_hms(paste(all$DateMMDDYYYY, all$TimeHHMMSS))
setnames(all,1:2,c("Date","Time"))
# exclude "Date" and "Time"
all <- all[,!c("Date", "Time")]
# reorder
all <- all[,c("Date_time", "Pond", "Day", "Depthm", "ChlorophyllRFU.1", "CondScm", "SpCondScm",
"fDOMRFU", "ODOmgL", "ODOsat", "BGAPCRFU", "pH", "TempC")]
# rename
setnames(all, c("Date_time", "Pond", "Day", "Depth_m", "Chlorophyll_RFU", "Cond_uScm", "SpCond_uScm",
"fDOM_RFU", "ODO_mgL", "ODO_sat", "BGAPC_RFU", "pH", "Temp_C"))
# debug: remove duplicate values
all <- unique(all, by=c("Pond", "Date_time"))
# check the variable types
str(all)
# Step 3: cut the profiles -----------------------------------------------------
# Here, I will cut the profile subsets of the individual ponds to the relevant
# range
# Check whether the profiling was done correctly in all ponds
# Check if all Ponds have at least 1 measurement of Depth greater or equal
# to 1m
sapply(unique(all$Pond), function(pond) {
any(all$Depth_m[all$Pond == pond] >= 1)
}) # Since some ponds are very shallow, I'll still include all the ponds for
# the profile cutting
# The current cutting is as follows:
# First, I individually selected a starting level where I cut, depending
# on the pond. Sometimes, the sondes were initially held at a deeper point
# before starting profiling.
# After cutting away everything below the threshold, I search the maximum depth
# and keep only the sequence starting from the threshold up to the maximum depth
# Then, I order the values by increasing depth, not time (sometimes, the sampling person
# might lift the sonde up a bit by accident).
# Initialize an empty list to store results for each pond
result_list <- list()
# Pick individual thresholds
thresholds <- c("B1P1"=0.9, "B1P2"=0.325, "B1P3"=0.75,  "B1P4" = 0.6, "B2P2"=1,
"B2P3"=1, "B2P4"=0.5, "B3P0"=0.6, "B3P1"=0.6, "B3P2"=0.5, "B3P3"=1,
"B3P4"=0.6, "EFL2"=1, "ERL122"=1, "ERL152"=1, "ERL186"=0.52, "ERL32"=1.25,
"ERL33"=1, "ERL5"=1, "ERL85"=1, "ERL87"=0.55, "ERL88"=0.325 , "L26"=1.25)
# Loop through each unique pond
for (pond in unique(all$Pond)) {
# Subset the data for the current pond
pond_data <- all[Pond == pond]
# Get the unique depth threshold for the current pond
threshold <- thresholds[pond]
# Filter out Depth_m below the unique threshold for this pond
pond_data <- pond_data[Depth_m >= threshold]
# Cut off all values after the maximum depth
pond_data <- pond_data[seq_len(which.max(pond_data$Depth_m))]  # Retain up to the maximum depth
# Optionally, you could reset the row names
rownames(pond_data) <- NULL
# Store the result in the list
result_list[[pond]] <- pond_data
}
# Combine all subsets back into a single data.table if needed
all <- rbindlist(result_list)
# Order the observations by ascending depth
all <- all %>%
arrange(Pond, Depth_m)
# save
fwrite(all, "../data/sondes_profiling_cut/merged_profiles_cut_2021.txt", sep = "\t")
# Step 4: control plots --------------------------------------------------------
# Here I wanna plot the profiles of different parameters
# x-axis: Parameter; y-axis: Depth
# Temperature
# Get unique pond names
ponds <- unique(all$Pond)
plots_TempC <- lapply(ponds, function(pond_name) {
dat <- subset(all, Pond == pond_name)
day <- unique(dat$Day)[1]
ggplot(data = dat, aes(x = Temp_C, y = Depth_m)) +
geom_point() +
geom_path() +
scale_y_reverse() +
labs(title = paste("Thermocline", pond_name, ",", day, "2021"))
})
# Save the plot as a .png
png("../results_profiling/profiling_TempC_2021.png", width = 1800, height = 1400)
grid.arrange(grobs = plots_TempC, ncol = 4)
dev.off()
# Chlorophyll_RFU
plots_Chloro <- lapply(ponds, function(pond_name) {
dat <- subset(all, Pond == pond_name)
day <- unique(dat$Day)[1]
ggplot(data = dat, aes(x = Chlorophyll_RFU, y = Depth_m)) +
geom_point() +
geom_path() +
scale_y_reverse() +
labs(title = paste("Chlorophyll RFU", pond_name, ",", day, "2021"))
})
# Save the plot as a .png
png("../results_profiling/profiling_ChloroRFU_2021.png", width = 1800, height = 1400)
grid.arrange(grobs = plots_Chloro, ncol = 4)
dev.off()
# fDOM RFU
plots_fDOM <- lapply(ponds, function(pond_name) {
dat <- subset(all, Pond == pond_name)
day <- unique(dat$Day)[1]
ggplot(data = dat, aes(x = fDOM_RFU, y = Depth_m)) +
geom_point() +
geom_path() +
scale_y_reverse() +
labs(title = paste("fDOM RFU", pond_name, ",", day, "2021"))
})
# Save the plot as a .png
png("../results_profiling/profiling_fDOM_2021.png", width = 1800, height = 1400)
grid.arrange(grobs = plots_fDOM, ncol = 4)
dev.off()
# ODO_mgL
plots_ODO <- lapply(ponds, function(pond_name) {
dat <- subset(all, Pond == pond_name)
day <- unique(dat$Day)[1]
ggplot(data = dat, aes(x = ODO_mgL, y = Depth_m)) +
geom_point() +  # Plot the points
geom_path() +  # Connect the points by row order
scale_y_reverse() + # Reverse depth scale
labs(title = paste("Dissolved Oxygen mg/L", pond_name, ",", day, "2021"))
})
# Save the plot as a .png
png("../results_profiling/profiling_ODO_2021.png", width = 1800, height = 1400)
grid.arrange(grobs = plots_ODO, ncol = 4)
dev.off()
# BGA-PC RFU
plots_BGAPC <- lapply(ponds, function(pond_name) {
dat <- subset(all, Pond == pond_name)
day <- unique(dat$Day)[1]
ggplot(data = dat, aes(x = BGAPC_RFU, y = Depth_m)) +
geom_point() +
geom_path() +
scale_y_reverse() +
labs(title = paste("BGA-PC RFU", pond_name, ",", day, "2021"))
})
# Save the plot as a .png
png("../results_profiling/profiling_BGAPC_2021.png", width = 1600, height = 1400)
grid.arrange(grobs = plots_BGAPC, ncol = 5)
dev.off()
library(LakeMetabolizer)
?ts.meta.depths()
demo(package = "LakeMetabollizer")
demo(package = "LakeMetabolizer")
demo("fig_metab", package = "LakeMetabolizer")
ts.data
View(z.mix)
